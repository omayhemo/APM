#!/bin/bash
# APM Framework Release Script
# Safe release process that NEVER pushes project files to APM repository

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configuration
PROJECT_ROOT="{{PROJECT_ROOT}}"
APM_REPO_PATH="${PROJECT_ROOT}/APM"
DIST_DIR="${PROJECT_ROOT}/dist"

# Parse arguments
VERSION="$1"
RELEASE_TYPE="${2:-stable}"

if [ -z "$VERSION" ]; then
    echo -e "${RED}Error: Version number required${NC}"
    echo "Usage: $0 <version> [--beta|--rc|--alpha]"
    exit 1
fi

echo -e "${BLUE}═══════════════════════════════════════════${NC}"
echo -e "${BLUE}     APM Framework Release v${VERSION}${NC}"
echo -e "${BLUE}═══════════════════════════════════════════${NC}"
echo ""

# Step 1: Validate version format
if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-z]+\.[0-9]+)?$'; then
    echo -e "${RED}Error: Invalid version format. Use semantic versioning (e.g., 1.2.3 or 1.2.3-beta.1)${NC}"
    exit 1
fi

# Step 2: Check git status
echo -e "${YELLOW}Checking git status...${NC}"
if [ -n "$(git status --porcelain)" ]; then
    echo -e "${RED}Error: Working directory has uncommitted changes${NC}"
    echo "Please commit or stash changes before releasing"
    exit 1
fi

# Step 3: Update VERSION files
echo -e "${YELLOW}Updating version files...${NC}"
echo "$VERSION" > "${PROJECT_ROOT}/VERSION"
echo "$VERSION" > "${PROJECT_ROOT}/installer/VERSION"
echo "$VERSION" > "${PROJECT_ROOT}/installer/templates/VERSION"
echo -e "${GREEN}✓ Version files updated${NC}"

# Step 4: Create changelog
echo -e "${YELLOW}Creating changelog...${NC}"
CHANGELOG_FILE="${PROJECT_ROOT}/project_docs/changelogs/CHANGELOG-v${VERSION}.md"
mkdir -p "${PROJECT_ROOT}/project_docs/changelogs"

cat > "$CHANGELOG_FILE" << EOF
# Changelog for APM Framework v${VERSION}

Release Date: $(date '+%Y-%m-%d')

## Summary
[Brief summary of this release]

## New Features
- [Feature 1]
- [Feature 2]

## Improvements
- [Improvement 1]
- [Improvement 2]

## Bug Fixes
- [Fix 1]
- [Fix 2]

## Breaking Changes
- [If any]

## Migration Guide
[If needed for breaking changes]

## Contributors
- [List of contributors]

---
Generated for APM Framework v${VERSION}
EOF

echo -e "${GREEN}✓ Changelog created at ${CHANGELOG_FILE}${NC}"

# Step 5: Create release notes
echo -e "${YELLOW}Creating release notes...${NC}"
RELEASE_NOTES_FILE="${PROJECT_ROOT}/project_docs/release-notes/RELEASE-NOTES-v${VERSION}.md"
mkdir -p "${PROJECT_ROOT}/project_docs/release-notes"

cat > "$RELEASE_NOTES_FILE" << EOF
# Release Notes - APM Framework v${VERSION}

## 🎉 APM Framework v${VERSION} Released!

### Installation

\`\`\`bash
curl -sSL https://raw.githubusercontent.com/omayhemo/APM/main/install.sh | bash
\`\`\`

### What's New

[Highlight the major features and improvements]

### Quick Start

1. Install APM Framework
2. Run \`ap\` to activate the orchestrator
3. Start building with specialized AI agents

### Documentation

- [Installation Guide](https://github.com/omayhemo/APM#installation)
- [Quick Start Guide](https://github.com/omayhemo/APM#quick-start)
- [Command Reference](https://github.com/omayhemo/APM#commands)

### Upgrade Instructions

For existing users, upgrade with:
\`\`\`bash
curl -sSL https://raw.githubusercontent.com/omayhemo/APM/main/install.sh | bash
\`\`\`

### Support

- Report issues: https://github.com/omayhemo/APM/issues
- Documentation: https://github.com/omayhemo/APM/wiki

---
Thank you for using APM Framework!
EOF

echo -e "${GREEN}✓ Release notes created${NC}"

# Step 6: Build distribution
echo -e "${YELLOW}Building distribution package...${NC}"
cd "${PROJECT_ROOT}"
./build-distribution.sh
echo -e "${GREEN}✓ Distribution package built${NC}"

# Step 7: Create dist README
echo -e "${YELLOW}Creating distribution README...${NC}"
cat > "${DIST_DIR}/README.md" << EOF
# APM Framework v${VERSION} Distribution

This distribution contains the APM Framework installer and templates.

## Installation

1. Extract the archive:
   \`\`\`bash
   tar -xzf coherence-v${VERSION}-installer.tar.gz
   \`\`\`

2. Run the installer:
   \`\`\`bash
   cd coherence-v${VERSION}-installer
   ./payload/install.sh
   \`\`\`

## Contents

- \`installer/\` - Installation scripts and templates
- \`VERSION\` - Version information
- \`LICENSE\` - MIT License

## Support

Visit https://github.com/omayhemo/APM for documentation and support.
EOF

echo -e "${GREEN}✓ Distribution README created${NC}"

# Step 8: Commit changes in main repository
echo -e "${YELLOW}Committing version updates...${NC}"
git add -A
git commit -m "Release v${VERSION}

- Updated version files
- Created changelog and release notes
- Built distribution package"

# Step 9: Create tag in main repository
echo -e "${YELLOW}Creating git tag...${NC}"
git tag -a "v${VERSION}" -m "APM Framework v${VERSION}

$(cat "$RELEASE_NOTES_FILE")"
echo -e "${GREEN}✓ Tagged as v${VERSION}${NC}"

# Step 10: Update APM repository (SAFELY)
echo -e "${YELLOW}Updating APM repository...${NC}"
echo -e "${RED}SAFETY CHECK: Only updating installer files, NOT copying project files${NC}"

if [ ! -d "$APM_REPO_PATH" ]; then
    echo -e "${YELLOW}Cloning APM repository...${NC}"
    git clone https://github.com/omayhemo/APM.git "$APM_REPO_PATH"
fi

cd "$APM_REPO_PATH"
git pull origin main

# Update ONLY the installer if needed
if [ -f "${PROJECT_ROOT}/APM/install.sh" ]; then
    cp "${PROJECT_ROOT}/APM/install.sh" "$APM_REPO_PATH/install.sh"
    echo -e "${GREEN}✓ Updated APM installer${NC}"
fi

# Update README with new version
sed -i "s/APM Framework v[0-9\.]\+/APM Framework v${VERSION}/g" README.md
sed -i "s/Latest Version: v[0-9\.]\+/Latest Version: v${VERSION}/g" README.md
sed -i "s/Release Date: [0-9-]\+/Release Date: $(date '+%Y-%m-%d')/g" README.md

# Commit APM repository changes
git add install.sh README.md
git commit -m "Update installer for v${VERSION}" || echo "No changes to installer"

# Create tag in APM repository
git tag -a "v${VERSION}" -m "APM Framework v${VERSION}"

# Push to APM repository
echo -e "${YELLOW}Pushing to APM repository (tags only)...${NC}"
git push origin main --tags

# Step 11: Create GitHub release
echo -e "${YELLOW}Creating GitHub release...${NC}"
cd "$APM_REPO_PATH"

# Check if gh CLI is available
if command -v gh &> /dev/null; then
    gh release create "v${VERSION}" \
        "${DIST_DIR}/coherence-v${VERSION}-installer.tar.gz" \
        --title "APM Framework v${VERSION}" \
        --notes-file "${RELEASE_NOTES_FILE}" \
        --target main
    echo -e "${GREEN}✓ GitHub release created${NC}"
else
    echo -e "${YELLOW}GitHub CLI not found. Please create release manually:${NC}"
    echo "1. Go to https://github.com/omayhemo/APM/releases/new"
    echo "2. Tag: v${VERSION}"
    echo "3. Upload: ${DIST_DIR}/coherence-v${VERSION}-installer.tar.gz"
    echo "4. Use release notes from: ${RELEASE_NOTES_FILE}"
fi

# Step 12: Final verification
echo ""
echo -e "${GREEN}═══════════════════════════════════════════${NC}"
echo -e "${GREEN}     Release v${VERSION} Complete!${NC}"
echo -e "${GREEN}═══════════════════════════════════════════${NC}"
echo ""
echo "Release Summary:"
echo "- Version files updated"
echo "- Changelog created: ${CHANGELOG_FILE}"
echo "- Release notes created: ${RELEASE_NOTES_FILE}"
echo "- Distribution built: ${DIST_DIR}/coherence-v${VERSION}-installer.tar.gz"
echo "- Git tag created: v${VERSION}"
echo "- APM repository updated (installer only)"
echo "- GitHub release created/pending"
echo ""
echo -e "${YELLOW}Next Steps:${NC}"
echo "1. Verify release at: https://github.com/omayhemo/APM/releases"
echo "2. Test installation: curl -sSL https://raw.githubusercontent.com/omayhemo/APM/main/install.sh | bash"
echo "3. Update documentation if needed"
echo ""
echo -e "${GREEN}Release process completed successfully!${NC}"