# EPIC-016: APM to Claude Code Sub-Agents Migration

**Epic Owner**: Product Owner  
**Status**: {{EPIC_STATUS}}  
**Priority**: High  
**Target Sprint**: 14-17  
**Total Story Points**: 89  

## Business Objective

Transform the APM framework from command-based personas to native Claude Code sub-agents while preserving all existing functionality, improving performance, and addressing user experience issues (particularly TTS configuration).

## Business Value

- **Native Integration**: Leverage Claude Code's built-in sub-agent system for better performance
- **Improved Context**: Each agent gets dedicated context window (no shared memory limits)
- **Automatic Routing**: Context-aware agent selection reduces user cognitive load
- **Template-Based Deployment**: Installer templates protect APM framework integrity
- **Enhanced Reliability**: Native implementation reduces command parsing errors
- **TTS Fix**: More robust configuration prevents accidental disabling

## Success Criteria

- ✅ All 8 core personas migrated with identical capabilities
- ✅ No behavioral changes in any persona 
- ✅ All parallel features functional
- ✅ Voice notifications working reliably
- ✅ Session management preserved
- ✅ Backward compatibility maintained (dual-mode operation)
- ✅ Zero feature regression
- ✅ TTS configuration more robust and user-friendly
- ✅ **CRITICAL**: APM framework never directly modified during migration

## Technical Approach

1. **Template-First Strategy**: All sub-agent artifacts created as installer templates
2. **APM Protection**: Never modify `.apm/` directory - only create `templates/` files
3. **Phased Migration**: 4-week implementation across 4 phases
4. **Preservation Strategy**: Direct content migration preserving all behaviors
5. **Dual-Mode Operation**: Both `/ap` commands and sub-agent mentions work
6. **Incremental Rollout**: Core agents first, then specialized agents
7. **Continuous Validation**: Test each phase before proceeding

## Dependencies

- Claude Code v1.0+ with sub-agent support
- Existing APM framework (v3.0.0.rc.1) - **READ ONLY**
- Voice notification scripts
- Session management system
- Installer template system

## Risks & Mitigations

| Risk | Impact | Mitigation |
|------|--------|------------|
| APM Framework Corruption | Critical | Templates-only approach, never modify APM directly |
| User adoption resistance | Medium | Dual-mode operation allows gradual transition |
| Feature regression | High | Comprehensive testing at each phase |
| Context window limitations | Medium | Dedicated windows per agent improve capacity |
| Voice script compatibility | Low | Preserve existing scripts unchanged |
| Timeline pressure | Medium | Phased approach allows for adjustments |

## Phase Breakdown

### Phase 1: Foundation (Sprint 14) - 21 Points
**Goal**: Create template infrastructure and migrate core agents
- Story 16.1: Create Sub-Agent Infrastructure Templates (3 points)
- Story 16.2: Create Developer Agent Template (5 points)
- Story 16.3: Create Architect Agent Template (5 points)
- Story 16.4: Create QA Agent Template (5 points)
- Story 16.5: Create Orchestrator Template (3 points)

### Phase 2: Enhancement (Sprint 15) - 34 Points
**Goal**: Template remaining agents and port parallel capabilities
- Story 16.6: Create PM Agent Template (5 points)
- Story 16.7: Create PO Agent Template (5 points)
- Story 16.8: Create SM Agent Template (5 points)
- Story 16.9: Create Analyst Agent Template (5 points)
- Story 16.10: Create Design Architect Template (5 points)
- Story 16.11: Port Parallel Execution Templates (5 points)
- Story 16.12: Integrate Voice Notification Templates (4 points)

### Phase 3: Advanced Features (Sprint 16) - 21 Points
**Goal**: Preserve AI/ML features and implement advanced workflows
- Story 16.13: Preserve AI/ML QA Templates (8 points)
- Story 16.14: Implement Parallel Sprint Templates (8 points)
- Story 16.15: Create Agent Chaining Templates (5 points)

### Phase 4: Transition (Sprint 17) - 13 Points
**Goal**: Enable dual-mode operation and complete documentation
- Story 16.16: Implement Dual-Mode Templates (5 points)
- Story 16.17: Create User Migration Guide Template (3 points)
- Story 16.18: Update All Documentation Templates (5 points)

## Critical Implementation Notes

### APM Protection Protocol
- **NEVER** modify any file in `.apm/` directory
- **ONLY** create files in `templates/templates/claude/agents/`
- **ALWAYS** use `.template` suffix for installer processing
- **VERIFY** templates before creation to avoid APM violations

### Template Structure Requirements
```
templates/templates/claude/agents/
├── README.md.template
├── agent-template.md.template
├── config/base-config.yaml.template
├── migration/
│   ├── tracking.md.template
│   └── rollback.md.template
└── personas/
    ├── developer.md.template
    ├── architect.md.template
    ├── qa.md.template
    └── orchestrator.md.template
```

### Quality Gates

#### Phase 1 Gates
- [ ] Templates created without APM violations
- [ ] 4 core agent templates validated
- [ ] Voice notification integration preserved
- [ ] Basic parallel execution templated
- [ ] No regression in APM functionality

#### Phase 2 Gates
- [ ] All 8 agent templates created
- [ ] Management workflow templates preserved
- [ ] Advanced parallel feature templates working
- [ ] Voice system templates fully integrated
- [ ] Template validation passed

#### Phase 3 Gates
- [ ] AI/ML capability templates preserved
- [ ] Parallel sprint coordination templates working
- [ ] Agent chaining templates implemented
- [ ] Performance benchmark templates met
- [ ] Security validation templates completed

#### Phase 4 Gates
- [ ] Dual-mode operation templates functioning
- [ ] User migration guide template complete
- [ ] All documentation templates updated
- [ ] Go-live readiness templates confirmed
- [ ] Rollback procedure templates tested

## Definition of Done

For this epic to be considered complete:
- [ ] All 18 stories completed successfully
- [ ] All templates created in proper installer structure
- [ ] Zero modifications made to APM framework
- [ ] All agent behaviors preserved in templates
- [ ] Voice notifications templated and tested
- [ ] Session management templates functional
- [ ] Backward compatibility templates implemented
- [ ] User migration guide template created
- [ ] Rollback procedures templated and tested
- [ ] Performance benchmarks maintained in templates

## Acceptance Criteria

1. **Template Infrastructure Complete**
   - [ ] All sub-agent templates created in `templates/templates/claude/agents/`
   - [ ] Base configuration template functional
   - [ ] Migration tracking template operational
   - [ ] Rollback procedures template tested

2. **Agent Migration Templates Complete**
   - [ ] Developer agent template preserves all functionality
   - [ ] Architect agent template maintains design capabilities
   - [ ] QA agent template includes AI/ML features
   - [ ] Orchestrator template enables coordination
   - [ ] All management agent templates (PM, PO, SM, Analyst, Design Architect) functional

3. **System Integration Templates**
   - [ ] Parallel execution templates maintain performance improvements
   - [ ] Voice notification templates work reliably
   - [ ] Session management templates preserve functionality
   - [ ] Agent chaining templates enable workflows

4. **Transition Templates**
   - [ ] Dual-mode operation templates allow gradual migration
   - [ ] User migration guide template complete
   - [ ] Documentation templates updated
   - [ ] Training materials templates created

5. **Quality Assurance**
   - [ ] Zero APM framework modifications
   - [ ] All templates validated through installer
   - [ ] Performance benchmarks maintained
   - [ ] Security requirements met in templates
   - [ ] User acceptance criteria met in templates

---

**Critical Success Factor**: This epic's success depends on creating comprehensive installer templates without ever modifying the APM framework directly. All work must be template-based to preserve APM integrity and enable safe installation.