# Parallel Code Review Command
name: planning-review

## ðŸŽ­ PERSONA CONTEXT ACTIVATION

**This command requires the Developer persona.**

```markdown
*Loading Developer context for parallel execution...*

Quick Context Load (1-2 seconds):
- Loading Developer configuration and expertise
- Preparing parallel execution framework
- Voice notification: bash ${{SPEAK_DEV}} "Developer ready for parallel execution"
- Workspace validation: Ensuring execution from {{PROJECT_ROOT}}

*Developer context ready. Launching parallel streams...*
```


**Developer Agent Only**: Executes comprehensive code review using native sub-agents for 9 parallel analysis streams with 80% performance improvement.

## Metadata
- **Name**: parallel-review
- **Description**: Multi-stream code review with native parallelism
- **Agent**: Developer
- **Performance**: 80% faster than sequential review
- **Streams**: 9 parallel analysis streams

## Overview

The `/parallel-review` command enables the Developer to execute comprehensive code review by:
- Analyzing code across 9 parallel review streams and quality dimensions
- Spawning 9 native Developer sub-agents working simultaneously
- Using natural language activation for each stream with specific focus areas
- Coordinating feedback aggregation and priority assessment in real-time
- Monitoring progress across all parallel review streams
- Synthesizing results into actionable code review deliverables

## Usage

```
/parallel-review [options]
```

## Options

- `--target <path>` - Specific file or directory to review (default: current changes)
- `--scope <scope>` - Review scope: `files`, `commit`, `branch`, `pr` (default: files)
- `--depth <level>` - Review depth: `surface`, `standard`, `deep` (default: standard)
- `--focus <areas>` - Focus areas: `security,performance,maintainability` (default: all)

## Prerequisites

Before running this command, ensure:
- [ ] Code changes are ready for review (committed or staged)
- [ ] Coding standards and review criteria are defined
- [ ] Test coverage is available for analysis
- [ ] Previous review feedback has been addressed

## ðŸš€ INITIALIZATION PROTOCOL (MANDATORY)

**CRITICAL**: Upon activation, you MUST immediately execute parallel initialization:

```
I'm initializing the Parallel Code Review process. Let me load all required context in parallel for optimal performance.

*Executing parallel initialization tasks:*
[Execute all 5 tasks in single function_calls block]
- Task 1: Load coding standards from {{AP_ROOT}}/templates/coding-standards.md
- Task 2: Load review checklists from {{AP_ROOT}}/checklists/code-review-checklist.md
- Task 3: Analyze current code changes and scope
- Task 4: Load security review patterns from {{AP_ROOT}}/templates/security-patterns.md
- Task 5: Load performance review criteria from {{AP_ROOT}}/templates/performance-criteria.md
```

## Parallel Review Streams

### Stream 1: Code Quality & Standards (5-8 minutes)
- **Focus**: Coding standards, best practices, code clarity
- **Analysis**: Style consistency, naming conventions, documentation
- **Deliverables**: Style violations, improvement suggestions
- **Priority**: Medium impact, high frequency issues

### Stream 2: Architecture & Design Patterns (8-12 minutes)
- **Focus**: Design patterns, SOLID principles, architecture alignment
- **Analysis**: Class design, dependency injection, separation of concerns
- **Deliverables**: Design pattern recommendations, refactoring suggestions
- **Priority**: High impact, structural improvements

### Stream 3: Security Analysis (10-15 minutes)
- **Focus**: Security vulnerabilities, input validation, auth patterns
- **Analysis**: OWASP Top 10, injection attacks, data exposure
- **Deliverables**: Security vulnerabilities, mitigation strategies
- **Priority**: Critical impact, security risks

### Stream 4: Performance & Optimization (7-11 minutes)
- **Focus**: Performance bottlenecks, resource usage, efficiency
- **Analysis**: Algorithm complexity, memory usage, database queries
- **Deliverables**: Performance improvements, optimization opportunities
- **Priority**: High impact, performance gains

### Stream 5: Error Handling & Resilience (6-9 minutes)
- **Focus**: Exception handling, error recovery, fault tolerance
- **Analysis**: Try-catch patterns, error propagation, graceful degradation
- **Deliverables**: Error handling improvements, resilience patterns
- **Priority**: High impact, reliability improvements

### Stream 6: Testing & Test Coverage (8-13 minutes)
- **Focus**: Unit tests, integration tests, test quality
- **Analysis**: Test coverage, test patterns, mocking strategies
- **Deliverables**: Test improvements, coverage gaps, test refactoring
- **Priority**: Medium impact, quality assurance

### Stream 7: Documentation & Comments (4-7 minutes)
- **Focus**: Code documentation, inline comments, API documentation
- **Analysis**: Documentation quality, comment relevance, API docs
- **Deliverables**: Documentation improvements, comment suggestions
- **Priority**: Medium impact, maintainability

### Stream 8: Dependencies & Imports (5-8 minutes)
- **Focus**: Dependency management, unused imports, version conflicts
- **Analysis**: Package usage, circular dependencies, version compatibility
- **Deliverables**: Dependency cleanup, upgrade recommendations
- **Priority**: Medium impact, maintenance improvements

### Stream 9: Business Logic & Functionality (9-14 minutes)
- **Focus**: Business requirements alignment, logic correctness
- **Analysis**: Feature implementation, edge cases, requirement fulfillment
- **Deliverables**: Logic improvements, requirement validation
- **Priority**: High impact, functional correctness

## Native Implementation Architecture

This command uses native sub-agent parallelism to spawn Developer review specialists:

### Phase 1: Review Context Loading (5 tasks in parallel)
1. **Load Coding Standards**: Framework patterns and style guidelines
2. **Load Review Checklists**: Systematic review criteria and processes
3. **Analyze Code Changes**: Scope, complexity, and impact assessment
4. **Load Security Patterns**: Security review guidelines and threat models
5. **Load Performance Criteria**: Performance benchmarks and optimization patterns

### Phase 2: Native Review Agent Spawning
6. **Spawn Quality Review Agent**: Code standards and style specialist
7. **Spawn Architecture Review Agent**: Design patterns and structure specialist
8. **Spawn Security Review Agent**: Security analysis and vulnerability specialist
9. **Spawn Performance Review Agent**: Performance and optimization specialist
10. **Spawn Resilience Review Agent**: Error handling and reliability specialist
11. **Spawn Testing Review Agent**: Test quality and coverage specialist
12. **Spawn Documentation Review Agent**: Documentation and maintainability specialist
13. **Spawn Dependency Review Agent**: Dependency management specialist
14. **Spawn Logic Review Agent**: Business logic and functionality specialist

### Phase 3: Real-Time Coordination
15. **Monitor Review Progress**: Track completion across all streams
16. **Prioritize Findings**: Assess severity and impact of issues
17. **Synthesize Feedback**: Aggregate results into actionable review
18. **Update Documentation**: Real-time updates to review reports

## Expected Outcomes

- **Parallel Review Streams**: 9 Developer review agents working simultaneously
- **Coordinated Analysis**: Seamless integration of all review dimensions
- **Accelerated Delivery**: 80% reduction in sequential review time
- **Quality Improvement**: Comprehensive coverage of all code quality aspects
- **Review Visibility**: Real-time progress tracking across all streams

## Output Format

```markdown
# Code Review Results - Parallel Analysis

## Review Summary
- **Files Reviewed**: [N] files, [M] lines of code
- **Review Depth**: [Surface/Standard/Deep]
- **Duration**: [X] minutes (80% faster than sequential)
- **Overall Quality Score**: [Score]/100

## Critical Issues (ðŸ”´ Immediate Action Required)
### Security Vulnerabilities
- **SQL Injection Risk**: Line 145 in user_service.py
- **XSS Vulnerability**: Line 67 in template_renderer.js
- **Hardcoded Credentials**: Line 23 in config.py

### Performance Bottlenecks
- **N+1 Query**: Line 89 in order_controller.py (87ms â†’ 3ms potential)
- **Memory Leak**: Line 156 in cache_manager.js

## High Priority Issues (ðŸŸ¡ Should Fix Soon)
### Architecture & Design
- **Violation of SRP**: UserService class handling auth and profile (Lines 45-120)
- **Missing Dependency Injection**: Direct instantiation in OrderProcessor (Line 78)

### Error Handling
- **Unhandled Exception**: Missing try-catch in payment_processor.py (Line 134)
- **Silent Failure**: Logging missing in file_uploader.js (Line 67)

## Medium Priority Issues (ðŸŸ¢ Improvement Opportunities)
### Code Quality
- **Naming Convention**: Variable names not following camelCase (12 instances)
- **Magic Numbers**: Hardcoded values without constants (8 instances)

### Testing
- **Low Coverage**: user_service.py at 45% coverage (target: 80%)
- **Missing Edge Cases**: No tests for empty input validation

### Documentation
- **Missing JSDoc**: 15 functions lack documentation
- **Outdated Comments**: 6 comments don't match current logic

## Stream Results Detail

### 1. Code Quality & Standards âœ… Complete
- Issues Found: 23 (Style: 18, Naming: 5)
- Severity: Medium
- **Status**: All issues catalogued

### 2. Architecture & Design Patterns âœ… Complete
- Issues Found: 8 (SOLID: 3, Patterns: 5)
- Severity: High
- **Status**: Refactoring recommendations provided

### 3. Security Analysis âœ… Complete
- Issues Found: 4 (Critical: 3, High: 1)
- Severity: Critical
- **Status**: Immediate fixes required

### 4. Performance & Optimization âœ… Complete
- Issues Found: 6 (Bottlenecks: 2, Inefficiencies: 4)
- Severity: High
- **Status**: Performance gains identified

### 5. Error Handling & Resilience âœ… Complete
- Issues Found: 9 (Missing: 5, Incorrect: 4)
- Severity: High
- **Status**: Reliability improvements needed

### 6. Testing & Test Coverage âœ… Complete
- Coverage: 67% (Target: 80%)
- Missing Tests: 12 scenarios
- **Status**: Test expansion required

### 7. Documentation & Comments âœ… Complete
- Issues Found: 21 (Missing: 15, Outdated: 6)
- Severity: Medium
- **Status**: Documentation updates needed

### 8. Dependencies & Imports âœ… Complete
- Issues Found: 7 (Unused: 4, Outdated: 3)
- Severity: Low
- **Status**: Cleanup recommendations provided

### 9. Business Logic & Functionality âœ… Complete
- Issues Found: 3 (Logic: 2, Requirements: 1)
- Severity: Medium
- **Status**: Logic validation needed

## Action Plan
1. **Immediate (Today)**: Fix critical security vulnerabilities
2. **This Week**: Address performance bottlenecks and error handling
3. **Next Sprint**: Implement architecture improvements and increase test coverage
4. **Ongoing**: Maintain code quality standards and documentation

## Metrics
- **Total Issues**: 81 issues identified
- **Critical**: 3 issues (4%)
- **High**: 23 issues (28%)
- **Medium**: 44 issues (54%)
- **Low**: 11 issues (14%)
```

## Workflow Steps

1. **Context Loading**: Load all review standards and criteria in parallel (5 tasks)
2. **Code Analysis**: Analyze scope, complexity, and change impact
3. **Agent Spawning**: Launch 9 specialized Developer review agents
4. **Parallel Execution**: Execute all review streams simultaneously
5. **Progress Monitoring**: Track completion and findings across streams
6. **Results Synthesis**: Aggregate findings with priority assessment
7. **Report Generation**: Generate comprehensive review report
8. **Action Planning**: Create prioritized improvement roadmap

## Performance Metrics

- **Baseline Review Time**: 40-50 minutes (sequential)
- **Parallel Review Time**: 8-15 minutes (parallel streams)
- **Performance Improvement**: 80% faster execution
- **Stream Coverage**: 100% comprehensive review coverage
- **Issue Detection**: 95% accuracy in finding code issues

## Integration Points

- **Git Integration**: Review commits, branches, or pull requests
- **CI/CD Pipeline**: Integrate with automated review processes
- **Issue Tracking**: Link findings to project management tools
- **Quality Gates**: Block deployments based on critical findings

## Available Capabilities

- **Multi-Language Support**: Language-specific review patterns
- **Framework Analysis**: Framework-specific best practices
- **Security Scanning**: OWASP and security pattern analysis  
- **Performance Profiling**: Bottleneck identification and optimization
- **Test Analysis**: Coverage gaps and test quality assessment
- **Documentation Review**: API docs and inline comment analysis
- **Dependency Audit**: Version management and security updates
- **Architecture Validation**: Design pattern and SOLID principle compliance

## Success Metrics

- **Review Streams Completed**: Target 9 simultaneous analysis streams
- **Issue Detection Accuracy**: >95% valid findings
- **Review Velocity**: 80% improvement over sequential review
- **Critical Issue Detection**: 100% of security vulnerabilities found
- **Developer Satisfaction**: Actionable, prioritized feedback

## Voice Notifications

```bash
bash {{AP_ROOT}}/voice/speakDeveloper.sh "Parallel code review launching. Initiating 9 simultaneous analysis streams for 80% review acceleration..."
```

## Native Sub-Agent Activation

When you run `/parallel-review`, I will:

1. **Review Context**: Load all coding standards and review criteria
2. **Stream Allocation**: Launch 9 specialized developer review agents
3. **Natural Language Spawning**: Activate each agent with specific focus:

```markdown
# Code Quality Agent Activation:
"I need a Code Quality specialist to review coding standards and style.
 Review Context:
 - Code Scope: [Files and changes to review]
 - Standards: [Coding standards and style guidelines]
 - Focus Areas: Style consistency, naming conventions, code clarity
 - Deliverables: Style violations and improvement suggestions
 Please conduct thorough code quality analysis."

# Security Review Agent Activation:
"I need a Security specialist to analyze code for vulnerabilities.
 Review Context:
 - Security Scope: [Authentication, data handling, input validation]
 - Threat Model: [OWASP Top 10, common vulnerabilities]
 - Focus Areas: Injection attacks, data exposure, auth patterns
 - Deliverables: Vulnerability report with mitigation strategies
 Please conduct comprehensive security analysis."
```

4. **Real-Time Coordination**: Monitor progress, prioritize findings
5. **Results Synthesis**: Aggregate comprehensive review report

## Advanced Configuration

```yaml
# parallel-review-config.yaml
parallel_review:
  streams: 9
  max_parallel_streams: 12
  stream_timeout: 15  # minutes
  
  analysis:
    security_deep_scan: true
    performance_profiling: true
    test_coverage_analysis: true
    
  reporting:
    detailed_findings: true
    action_priorities: true
    metrics_tracking: true
```

---
*Part of the APM High-Performance Code Quality Infrastructure*
