---
name: parallel-requirements
description: Execute comprehensive requirements analysis with 5 parallel sub-agents (70% faster)
metadata:
  version: 1.0.0
  agent: Analyst
  performance: parallel
  speedup: 70%
---

## ðŸŽ­ PERSONA CONTEXT ACTIVATION

**This command requires the Analyst persona.**

```markdown
*Loading Analyst context for optimal command execution...*

Quick Context Load (1-2 seconds):
- Loading Analyst configuration and expertise
- Loading relevant templates and frameworks  
- Voice notification: bash ${{SPEAK_ANALYST}} "Analyst context loaded for command execution"
- Workspace validation: Ensuring execution from {{PROJECT_ROOT}}

*Analyst context ready. Proceeding with command...*
```


# PARALLEL REQUIREMENTS ANALYSIS

## ðŸš€ INITIALIZATION PROTOCOL (MANDATORY)

**CRITICAL**: Upon activation, you MUST immediately execute parallel initialization:

```
I'm launching parallel requirements analysis with 5 native sub-agents for comprehensive coverage.

*Executing parallel initialization tasks:*
[Use native sub-agents - ALL in single function_calls block]
- Task 1: Load Analyst persona configuration from {{AP_ROOT}}/personas/analyst.md
- Task 2: Load project documentation from {{PROJECT_ROOT}}/project_docs/
- Task 3: Load existing requirements if available from {{PROJECT_ROOT}}/project_docs/requirements/
- Task 4: Load stakeholder information and user personas
- Task 5: Load compliance and regulatory requirements
```

### Initialization Task Prompts:
1. "Read analyst principles, requirements gathering methodologies, and analysis frameworks"
2. "Scan all project documentation for existing requirements and context"
3. "Check for any documented requirements, user stories, or acceptance criteria"
4. "Identify stakeholders, user personas, and their specific needs"
5. "Review compliance requirements, industry standards, and regulatory constraints"

### Post-Initialization:
After ALL tasks complete:
1. Voice announcement: bash {{AP_ROOT}}/voice/speakAnalyst.sh "Parallel requirements analysis initialized with 5 analysis streams"
2. Launch parallel analysis sub-agents

## ðŸš€ PARALLEL ANALYSIS EXECUTION

### Comprehensive Requirements Streams (5 Parallel Sub-Agents)
```
*Launching requirements analysis sub-agents:*
[Use native sub-agents - ALL in single function_calls block]
- Sub-Agent 1: Functional Requirements Analysis
  Prompt: "Analyze and document all functional requirements including features, capabilities, user interactions, workflows, and business logic. Create detailed functional specifications."

- Sub-Agent 2: Non-Functional Requirements Analysis  
  Prompt: "Identify and document all non-functional requirements including performance, scalability, security, reliability, usability, accessibility, and compatibility requirements."

- Sub-Agent 3: Constraints & Dependencies Analysis
  Prompt: "Map all technical constraints, system dependencies, integration requirements, third-party dependencies, and architectural constraints that impact the solution."

- Sub-Agent 4: User & Stakeholder Requirements
  Prompt: "Analyze user needs, stakeholder expectations, user journey requirements, acceptance criteria, and success metrics from all stakeholder perspectives."

- Sub-Agent 5: Compliance & Risk Requirements
  Prompt: "Identify regulatory requirements, compliance needs, security requirements, data privacy constraints, and risk mitigation requirements."
```

## ðŸ“Š REQUIREMENTS OUTPUT FORMAT

### Comprehensive Requirements Document
```markdown
# Requirements Analysis Report
Generated: [Timestamp]
Analysis Method: 5-Stream Parallel Analysis

## 1. FUNCTIONAL REQUIREMENTS
### Core Features
- FR001: [Requirement]
  - Description: [Detail]
  - Priority: [High/Medium/Low]
  - Acceptance Criteria: [Criteria]

### User Interactions
- FR002: [Requirement]
  - User Story: As a [user], I want [feature] so that [benefit]
  - Dependencies: [List]

## 2. NON-FUNCTIONAL REQUIREMENTS
### Performance
- NFR001: [Requirement]
  - Metric: [Measurable metric]
  - Target: [Specific target]

### Security
- NFR002: [Requirement]
  - Standard: [Compliance standard]
  - Implementation: [Approach]

## 3. CONSTRAINTS & DEPENDENCIES
### Technical Constraints
- TC001: [Constraint]
  - Impact: [Description]
  - Mitigation: [Strategy]

### System Dependencies
- SD001: [Dependency]
  - Type: [Internal/External]
  - Risk Level: [High/Medium/Low]

## 4. STAKEHOLDER REQUIREMENTS
### Primary Users
- SR001: [Requirement]
  - Stakeholder: [Name/Role]
  - Priority: [MoSCoW]

## 5. COMPLIANCE & RISK
### Regulatory Requirements
- CR001: [Requirement]
  - Regulation: [Name]
  - Deadline: [Date]

### Risk Mitigation
- RM001: [Risk]
  - Likelihood: [High/Medium/Low]
  - Impact: [High/Medium/Low]
  - Mitigation: [Strategy]

## REQUIREMENTS SUMMARY
- **Total Requirements**: [Count]
- **Critical Path Items**: [List]
- **High-Risk Areas**: [List]
- **Dependencies**: [Count]
- **Compliance Items**: [Count]
```

## ðŸ”„ ANALYSIS WORKFLOW

### Step 1: Parallel Discovery
- Launch all 5 sub-agents simultaneously
- Each analyzes their specific domain
- Gather comprehensive insights

### Step 2: Cross-Reference & Validation
- Identify overlaps and conflicts
- Validate requirements consistency
- Ensure completeness

### Step 3: Prioritization
- Apply MoSCoW methodology
- Consider business value
- Assess technical feasibility

### Step 4: Documentation
- Create structured requirements document
- Generate traceability matrix
- Update project documentation

## ðŸŽ¯ PERFORMANCE METRICS

- **Analysis Time**: ~3 minutes (vs 10 minutes sequential)
- **Coverage**: 100% of requirement categories
- **Parallel Streams**: 5 simultaneous analyses
- **Output Quality**: Enterprise-grade documentation

## ðŸ“‹ DELIVERABLES

After execution, this command provides:
- Comprehensive requirements document
- Requirements traceability matrix
- Risk assessment matrix
- Dependency mapping
- Compliance checklist
- Prioritized requirements backlog
- Acceptance criteria definitions
- Stakeholder sign-off template

## ðŸ”— INTEGRATION POINTS

### Handoff to PM:
```
/handoff pm
"Requirements analysis complete. [X] functional and [Y] non-functional requirements identified. Ready for PRD creation."
```

### Handoff to Architect:
```
/handoff architect
"Requirements documented with [Z] technical constraints. Architecture design can proceed."
```

## Available After Activation:
- Complete requirements specification
- Prioritized requirements list
- Risk and compliance analysis
- Stakeholder requirement mapping
- Dependency analysis
- Acceptance criteria library
- Requirements validation checklist

This command accelerates requirements analysis by 70% through native parallel execution, ensuring comprehensive coverage across all requirement dimensions.
