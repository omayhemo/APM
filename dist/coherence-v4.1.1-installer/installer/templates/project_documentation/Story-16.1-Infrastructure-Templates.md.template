# Story 16.1: Create Sub-Agent Infrastructure Templates

**Epic**: EPIC-016 Coherence to Claude Code Sub-Agents Migration  
**Story Points**: 3  
**Priority**: High  
**Status**: {{STORY_STATUS}}  
**Assignee**: {{STORY_ASSIGNEE}}  
**Sprint**: 14 (Foundation Phase)

## User Story

As a **Product Owner**, I want **sub-agent infrastructure templates created for the installer with unified context engineering** so that **the Coherence to Sub-Agents migration can be deployed without modifying the Coherence framework directly**.

## Business Value

- **Coherence Protection**: Ensures Coherence framework integrity by using template-based deployment
- **Safe Migration**: Installer templates allow controlled, reversible migration
- **Infrastructure Foundation**: Provides the base structure for all agent templates with unified context engineering
- **Risk Mitigation**: Template approach prevents accidental Coherence corruption

## Acceptance Criteria

### AC1: Infrastructure Documentation Template
- [x] Create `templates/templates/claude/agents/README.md.template`
- [x] Document sub-agent infrastructure for installer
- [x] Include directory structure and features overview
- [x] Explain template-based deployment approach

### AC2: Agent Template Foundation
- [x] Create `templates/templates/claude/agents/agent-template.md.template`
- [x] Provide base template for all agent personas
- [x] Include template variables for dynamic configuration
- [x] Preserve Coherence compatibility patterns with unified context engineering

### AC3: Configuration Template System
- [x] Create `templates/templates/claude/agents/config/base-config.yaml.template`
- [x] Define shared configuration for all sub-agents
- [x] Include voice notification settings
- [x] Establish workspace boundaries and security

### AC4: Migration Tracking Template
- [x] Create `templates/templates/claude/agents/migration/tracking.md.template`
- [x] Provide migration progress monitoring template
- [x] Include phase progress tracking
- [x] Define success criteria validation

### AC5: Rollback Procedures Template
- [x] Create `templates/templates/claude/agents/migration/rollback.md.template`
- [x] Provide comprehensive rollback procedures template
- [x] Include data preservation strategies
- [x] Define rollback triggers and communication plans

### AC6: APM Protection Compliance
- [x] **CRITICAL**: Zero modifications to `.apm/` directory
- [x] All files created in `templates/templates/claude/agents/`
- [x] Template structure validated for installer compatibility
- [x] Coherence protection protocol documented
- [x] **NEW**: Unified context engineering patterns implemented

## Technical Requirements

### Template Structure
```
templates/templates/claude/agents/
├── README.md.template                   # Infrastructure documentation
├── agent-template.md.template          # Base agent template
├── config/
│   └── base-config.yaml.template      # Shared configuration
├── migration/
│   ├── tracking.md.template           # Progress tracking
│   └── rollback.md.template           # Rollback procedures
└── personas/                          # Individual agent templates (future stories)
```

### Template Variables
Templates must include placeholders for:
- `{{AGENT_NAME}}` - Agent persona name
- `{{MIGRATION_VERSION}}` - Migration version
- `{{AP_ROOT}}` - Coherence root directory
- `{{TTS_PROVIDER}}` - Text-to-speech provider
- `{{SESSION_NOTES_PATH}}` - Session notes directory
- `{{CONTEXT_ENGINEERING_MODE}}` - Unified context engineering configuration

### Security Requirements
- **No Coherence Modifications**: Never touch `.apm/` directory
- **Template Isolation**: All work in `templates/templates/claude/agents/`
- **Installer Integration**: Templates must work with existing installer
- **Backward Compatibility**: Preserve all Coherence command functionality
- **Context Engineering Security**: Implement secure unified context sharing patterns

## Implementation Notes

### Critical Incident Resolution
**Coherence Protection Violation Detected**: Initial implementation incorrectly created `.claude/agents/` directory, violating the fundamental rule of never modifying Coherence infrastructure.

**Resolution Actions Taken**:
1. **Immediate Halt**: Stopped all work on incorrect implementation
2. **Coherence Restoration**: Removed all `.claude/agents/` modifications with `rm -rf`
3. **Template Creation**: Recreated all work as proper installer templates with unified context engineering
4. **Process Enhancement**: Added Coherence protection monitoring to prevent future violations

**Lessons Learned**:
- Coherence protection must be enforced at the start of every story
- Template-first approach with unified context engineering is non-negotiable
- Continuous verification needed during implementation
- Team education on Coherence protection and unified context patterns critical

### Template Design Principles
1. **Preservation First**: All Coherence capabilities preserved in template format with unified context engineering
2. **Variable-Driven**: Dynamic configuration through template variables
3. **Installer-Ready**: Compatible with existing installer infrastructure
4. **Rollback-Enabled**: Support for complete migration reversal
5. **Context-Engineered**: Unified context sharing and coordination patterns

## Definition of Done

- [x] All 6 acceptance criteria completed
- [x] Templates created in correct `templates/templates/claude/agents/` location
- [x] Zero modifications made to Coherence framework
- [x] Template structure validated for installer compatibility
- [x] Coherence protection protocol implemented and documented
- [x] Unified context engineering patterns validated
- [x] Code review completed (template structure validation)
- [x] Template variables properly defined
- [x] Installer integration verified

## Testing Strategy

### Template Validation
- **Structure Test**: Verify all templates in correct directory
- **Variable Test**: Confirm all template variables defined
- **Installer Test**: Validate compatibility with installer system
- **Coherence Test**: Verify no Coherence modifications made

### Integration Testing
- **Template Processing**: Test installer template processing
- **Configuration Test**: Validate base configuration template
- **Documentation Test**: Verify README template completeness

## Dependencies

### Upstream Dependencies
- Existing installer template system
- Coherence framework v4.1.0 (READ ONLY)
- Template processing infrastructure
- Unified context engineering framework

### Downstream Dependencies
- Story 16.2: Create Developer Agent Template
- Story 16.3: Create Architect Agent Template
- Story 16.4: Create QA Agent Template
- Story 16.5: Create Orchestrator Template

## Risk Assessment

### High Risk Items
- **Coherence Framework Corruption**: Mitigated by templates-only approach
- **Template Incompatibility**: Mitigated by installer integration testing
- **Missing Variables**: Mitigated by comprehensive template variable definition
- **Context Engineering Complexity**: Mitigated by unified pattern implementation

### Risk Mitigation
- **Coherence Protection Monitoring**: Continuous verification of no Coherence changes
- **Template Validation**: Automated checking of template structure with unified context patterns
- **Rollback Readiness**: Complete rollback procedures templated

## Success Metrics

### Functional Metrics
- **Templates Created**: 5/5 (100%)
- **Coherence Violations**: 0/0 (0% - Target achieved after correction)
- **Template Variables**: 100% defined
- **Unified Context Engineering**: 100% implemented
- **Installer Compatibility**: 100%

### Quality Metrics
- **Code Review**: Passed (template structure validation)
- **Coherence Protection**: Passed (after incident resolution)
- **Unified Context Engineering**: Passed (pattern validation)
- **Documentation**: Complete (comprehensive README)
- **Testing**: Passed (template validation)

## Timeline

### Implementation Timeline
- **Start Date**: {{START_DATE}}
- **Incident Date**: {{INCIDENT_DATE}} (APM violation detected)
- **Resolution Date**: {{RESOLUTION_DATE}} (Templates created correctly)
- **Completion Date**: {{COMPLETION_DATE}}

### Key Milestones
- [x] **Incident Response**: Coherence violation corrected immediately
- [x] **Template Foundation**: Base infrastructure templates with unified context engineering created
- [x] **Configuration System**: Shared configuration template established
- [x] **Migration Support**: Tracking and rollback templates completed
- [x] **Validation Complete**: All templates verified for installer compatibility with unified context patterns

## Post-Implementation

### Next Steps
1. **Story 16.2**: Use infrastructure to create Developer Agent template
2. **Story 16.3**: Use infrastructure to create Architect Agent template
3. **Story 16.4**: Use infrastructure to create QA Agent template
4. **Story 16.5**: Use infrastructure to create Orchestrator template

### Continuous Improvement
- Enhanced Coherence protection monitoring for future stories
- Template validation automation with unified context engineering
- Team training on template-first approach with unified context patterns
- Documentation of Coherence protection protocols

---

**Critical Success Factor**: This story establishes the foundation for the entire migration while maintaining absolute Coherence framework protection through the template-based approach with unified context engineering patterns.