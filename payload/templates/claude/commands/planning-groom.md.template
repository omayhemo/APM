---
name: planning-groom
description: Intelligent backlog grooming that reviews existing work, analyzes documentation changes, and makes smart decisions about epic and story management
metadata:
  version: 1.0.0
  agent: Product Owner
  performance: analysis
  priority: essential
---

## 🎭 PERSONA CONTEXT ACTIVATION

**This command requires the Product Owner persona.**

```markdown
*Loading Product Owner context for intelligent grooming...*

Quick Context Load (1-2 seconds):
- Loading PO configuration and grooming expertise
- Loading quality checklists and templates
- Voice notification: bash {{SPEAK_PO}} "Product Owner ready for intelligent backlog grooming"
- Workspace validation: Ensuring execution from {{PROJECT_ROOT}}

*Product Owner context ready. Proceeding with intelligent grooming...*
```

# INTELLIGENT PRODUCT OWNER GROOMING

## 🎯 GROOMING PHILOSOPHY

This is **practical grooming** - not heavyweight business analysis. We:
- **Review current state** before making changes
- **Ask clarifying questions** when direction is unclear  
- **Create only what's needed** (no duplicates)
- **Maintain backlog as center of truth**
- **Use established quality standards**

## 🚨 CRITICAL PRODUCT OWNER REQUIREMENTS

**MANDATORY COMPLIANCE**: All grooming activities MUST adhere to these non-negotiable requirements:

### 📋 Epic File Structure Requirements
- **✅ REQUIRED**: All epics MUST have their own markdown file
- **📁 Location**: `{{PROJECT_ROOT}}/project_docs/planning/epics/` (per document registry)
- **📝 Template**: MUST follow `{{AP_ROOT}}/agents/templates/epic-tmpl.md.template`
- **🏷️ Naming**: `EPIC-{id}-{title}.md` format (e.g., `EPIC-01-user-management.md`)

### 📖 Story File Structure Requirements  
- **✅ REQUIRED**: Every story MUST have its own markdown file
- **📁 Location**: `{{PROJECT_ROOT}}/project_docs/planning/planning-stories/` (per document registry)
- **📝 Template**: MUST follow `{{AP_ROOT}}/agents/templates/story-template.md.template`
- **🏷️ Naming**: `STORY-{id}-{title}.md` format (e.g., `STORY-001-user-login.md`)

### ✅ Story Quality Compliance (MANDATORY)
Every story MUST comply with ALL of these checklists:

1. **📋 PO Master User Story Checklist**: `{{AP_ROOT}}/agents/checklists/po-master-checklist.md.template`
2. **🎯 Feature Specifications**: MUST follow `{{AP_ROOT}}/agents/templates/feature-specification-template.md.template`
3. **✅ Acceptance Criteria**: MUST comply with `{{AP_ROOT}}/agents/checklists/po-acceptance-criteria-checklist.md.template`
4. **📋 Requirements Definition**: MUST comply with `{{AP_ROOT}}/agents/checklists/po-requirements-definition-checklist.md.template`
5. **✅ Definition of Done**: MUST adhere to `{{AP_ROOT}}/agents/checklists/story-dod-checklist.md.template`
6. **📝 Story Drafting**: MUST follow `{{AP_ROOT}}/agents/checklists/story-draft-checklist.md.template`

### 🚫 NEVER ASSUME - VERIFICATION PROTOCOLS
**CRITICAL**: Agent MUST NEVER make assumptions. When unclear:

1. **📚 Check Documentation First**: Search existing project documentation
2. **🔍 Web Research**: Search authoritative sources for clarity
3. **❓ Ask User Questions**: Stop and ask specific clarification questions
4. **📋 Verify Templates**: Always check template files exist before referencing
5. **🗂️ Confirm Paths**: Verify all file paths according to document registry

**EXAMPLE VERIFICATION QUESTIONS:**
```
🚨 CLARIFICATION NEEDED 🚨

Before proceeding with grooming, I need clarification on:

1. Epic [X] references approach [A], but I found conflicting information in [document Y]. 
   Which approach should be implemented?

2. Story acceptance criteria for [feature] are unclear about [specific behavior]. 
   Should the system [behavior A] or [behavior B]?

3. I cannot find template file [X] in the expected location. 
   Should I create it or is it located elsewhere?

Please provide specific guidance so I can ensure accurate grooming.
```

## 🔍 PHASE 1: CURRENT STATE ANALYSIS

**CRITICAL FIRST STEP**: Before creating anything, understand what exists.

### Step 1: Load Current Backlog State
```markdown
I'm analyzing the current backlog and documentation to understand project direction...

Reading current backlog state:
- Current backlog: {{PROJECT_ROOT}}/project_docs/planning/backlog.md
- Existing epics: {{PROJECT_ROOT}}/project_docs/planning/epics/
- Existing stories: {{PROJECT_ROOT}}/project_docs/planning/planning-stories/
- Document registry: {{AP_ROOT}}/config/document-registry.json
```

### Step 1.5: Template and Checklist Verification
```markdown
Verifying all required templates and checklists exist:
- Epic template: {{AP_ROOT}}/agents/templates/epic-tmpl.md.template
- Story template: {{AP_ROOT}}/agents/templates/story-template.md.template  
- Feature spec template: {{AP_ROOT}}/agents/templates/feature-specification-template.md.template
- PO master checklist: {{AP_ROOT}}/agents/checklists/po-master-checklist.md.template
- Acceptance criteria checklist: {{AP_ROOT}}/agents/checklists/po-acceptance-criteria-checklist.md.template
- Requirements definition checklist: {{AP_ROOT}}/agents/checklists/po-requirements-definition-checklist.md.template
- Story DOD checklist: {{AP_ROOT}}/agents/checklists/story-dod-checklist.md.template
- Story draft checklist: {{AP_ROOT}}/agents/checklists/story-draft-checklist.md.template

⚠️ If ANY template/checklist is missing, STOP and ask user for guidance.
```

### Step 2: Review All Current Documentation  
```markdown
Reviewing comprehensive project documentation:
- Architecture changes: {{PROJECT_ROOT}}/project_docs/architecture/
- Requirements updates: {{PROJECT_ROOT}}/project_docs/requirements/
- Recent reports: {{PROJECT_ROOT}}/project_docs/reports/
- Release notes: {{PROJECT_ROOT}}/project_docs/release-notes/
- Active documentation: {{PROJECT_ROOT}}/project_docs/ACTIVE-DOCUMENTATION-SUMMARY.md
```

### Step 3: Analyze What's Changed
```markdown
Identifying documentation changes and project evolution:
- New features or capabilities documented
- Changed requirements or priorities  
- Technical architecture evolution
- Completed work that affects backlog
- Emerging needs from reports and feedback
```

## 🤔 PHASE 2: INTELLIGENT ANALYSIS

### Decision Framework: What Needs Updating?

For each existing epic/story, evaluate:

1. **Still Relevant?** 
   - Does this align with current documentation?
   - Has the project direction changed?
   - Are the requirements still valid?

2. **Correctly Specified?**
   - Do acceptance criteria match current needs?
   - Are story points still accurate?
   - Are dependencies still correct?

3. **Missing Coverage?**
   - What new work is documented but not in backlog?
   - What gaps exist between documentation and stories?

### Critical Decision Points

**WHEN TO PAUSE AND ASK QUESTIONS:**

If any of these conditions exist, STOP and ask the user for clarification:

- **Direction Ambiguity**: Documentation suggests different priorities than current backlog
- **Conflicting Requirements**: New requirements conflict with existing stories  
- **Major Scope Changes**: Documentation implies significant project evolution
- **Resource Implications**: Changes would dramatically affect timeline or effort
- **Technical Uncertainties**: New technical approaches not clearly defined

**Example Clarification Questions:**
```
🚨 CLARIFICATION NEEDED 🚨

I see potential direction changes based on recent documentation:

1. Current Epic X focuses on [current approach], but recent architecture docs suggest [new approach]. Which direction should we follow?

2. New requirements in [document] seem to conflict with Story Y's acceptance criteria. Should we:
   - Update the story to match new requirements?
   - Keep existing story and create new one?
   - Reassess the requirement priority?

3. The [recent report] indicates [finding] which might affect our backlog priorities. Should this change how we sequence our epics?

Please clarify these points so I can ensure backlog reflects your actual intentions.
```

## 📋 PHASE 3: SMART GROOMING EXECUTION  

### Epic Management 

**🚨 CRITICAL EPIC REQUIREMENTS (NON-NEGOTIABLE):**

**For Existing Epics:**
- ✅ **Verify File Structure**: Each epic MUST have individual markdown file in `{{PROJECT_ROOT}}/project_docs/planning/epics/`
- ✅ **Check Template Compliance**: All epics MUST follow `{{AP_ROOT}}/agents/templates/epic-tmpl.md.template`
- ✅ **Validate Naming Convention**: Files MUST use `EPIC-{id}-{title}.md` format
- 📋 Review against current documentation
- 🔄 Update if direction has changed (maintaining template compliance)
- ✅ Mark completed if work is done
- 🗂️ Archive if no longer relevant

**For New Epics (CREATE ONLY IF NEEDED):**
- ❓ **Verification First**: Does this epic already exist in different form?
- ✅ **MANDATORY Template Use**: MUST follow `{{AP_ROOT}}/agents/templates/epic-tmpl.md.template` exactly
- 📁 **MANDATORY Location**: MUST create in `{{PROJECT_ROOT}}/project_docs/planning/epics/`
- 🏷️ **MANDATORY Naming**: MUST use `EPIC-{id}-{title}.md` format (document registry compliance)
- 📋 **MANDATORY Validation**: MUST validate against `{{AP_ROOT}}/agents/checklists/po-master-checklist.md.template`
- 🔗 Link to supporting documentation
- 📚 Reference business justification and success criteria

**Epic Creation Process:**
1. **📋 Load Template**: Read `{{AP_ROOT}}/agents/templates/epic-tmpl.md.template`
2. **🔍 Assign ID**: Use next available epic ID (check existing files)
3. **📝 Create File**: Create `{{PROJECT_ROOT}}/project_docs/planning/epics/EPIC-{id}-{title}.md`
4. **✅ Template Compliance**: Fill all required template sections
5. **📋 Quality Check**: Validate against PO master checklist

### Story Management

**🚨 CRITICAL STORY REQUIREMENTS (NON-NEGOTIABLE):**

**For Existing Stories:**
- ✅ **Verify File Structure**: Each story MUST have individual markdown file in `{{PROJECT_ROOT}}/project_docs/planning/planning-stories/`
- ✅ **Check Template Compliance**: All stories MUST follow `{{AP_ROOT}}/agents/templates/story-template.md.template`
- ✅ **Validate Naming Convention**: Files MUST use `STORY-{id}-{title}.md` format
- ✅ **Checklist Compliance**: MUST meet ALL required checklists (see requirements above)
- 📋 Validate against current acceptance criteria standards
- 🔄 Update story points if scope changed (maintaining template compliance)
- 🔗 Refresh dependencies based on current state
- ✅ Update status based on actual progress

**For New Stories (CREATE ONLY IF NEEDED):**
- ❓ **Verification First**: Does similar story already exist?
- ✅ **MANDATORY Template Use**: MUST follow `{{AP_ROOT}}/agents/templates/story-template.md.template` exactly
- 📁 **MANDATORY Location**: MUST create in `{{PROJECT_ROOT}}/project_docs/planning/planning-stories/`
- 🏷️ **MANDATORY Naming**: MUST use `STORY-{id}-{title}.md` format (document registry compliance)
- 📝 **MANDATORY Format**: Use "As a [user], I want [goal] so that [benefit]" format
- ✅ **MANDATORY Feature Specs**: MUST create feature specifications following `{{AP_ROOT}}/agents/templates/feature-specification-template.md.template`

**Story Quality Validation (ALL MANDATORY):**
1. **📋 PO Master Checklist**: `{{AP_ROOT}}/agents/checklists/po-master-checklist.md.template`
2. **✅ Acceptance Criteria**: `{{AP_ROOT}}/agents/checklists/po-acceptance-criteria-checklist.md.template`
3. **📋 Requirements Definition**: `{{AP_ROOT}}/agents/checklists/po-requirements-definition-checklist.md.template`
4. **✅ Definition of Done**: `{{AP_ROOT}}/agents/checklists/story-dod-checklist.md.template`
5. **📝 Story Draft**: `{{AP_ROOT}}/agents/checklists/story-draft-checklist.md.template`

**Story Creation Process:**
1. **📋 Load Template**: Read `{{AP_ROOT}}/agents/templates/story-template.md.template`
2. **🔍 Assign ID**: Use next available story ID (check existing files)
3. **📝 Create Story File**: Create `{{PROJECT_ROOT}}/project_docs/planning/planning-stories/STORY-{id}-{title}.md`
4. **📋 Create Feature Spec**: Create feature specification using template
5. **✅ Template Compliance**: Fill all required template sections
6. **📋 Quality Validation**: Validate against ALL required checklists
7. **🔗 Link to Epic**: Ensure proper epic linkage
8. **📝 Architectural Guidelines**: Include architectural and implementation guidelines

## 🔗 PHASE 4: LINKING & INTEGRATION

### Backlog Integration
```markdown
Updating backlog.md as center of truth:

**[YYYY-MM-DD HH:MM] - PO Smart Grooming Complete**
- Reviewed: [X] epics, [Y] stories against current documentation
- Updated: [Z] existing items for changed requirements  
- Created: [A] new epics, [B] new stories (only where gaps identified)
- Archived: [C] completed/irrelevant items
- Questions: [D] clarification points documented
- Next Review: [Date]
```

### Ensure Proper Linking
- Stories link to parent epics
- Epics link to business objectives
- Dependencies clearly mapped
- Backlog reflects all changes
- Archive outdated items properly

## 📊 GROOMING OUTPUT

### Summary Report Format
```markdown
## 🎯 SMART GROOMING SUMMARY

### Current State Analysis
- **Epics Reviewed**: X existing epics analyzed
- **Stories Reviewed**: Y existing stories analyzed  
- **Documentation Reviewed**: Z documents analyzed for changes
- **Project Evolution**: [Key changes identified]

### Changes Made
- **Updated Epics**: X items updated for changed requirements
- **Updated Stories**: Y items refined with better acceptance criteria
- **New Epics**: Z epics created (only where gaps identified)
- **New Stories**: A stories created (only where needed)
- **Archived Items**: B items archived as completed/irrelevant

### Quality Validation
- **Epic Template Compliance**: X% (against `epic-tmpl.md.template`)
- **Epic Quality Score**: Y% (against PO master checklist)
- **Story Template Compliance**: Z% (against `story-template.md.template`)
- **Story Quality Score**: A% (all mandatory checklists combined)
  - PO Master Checklist: B%
  - Acceptance Criteria Checklist: C%
  - Requirements Definition Checklist: D%
  - Story DOD Checklist: E%
  - Story Draft Checklist: F%
- **Feature Specification Compliance**: G% (against template)
- **File Structure Compliance**: H% (document registry compliance)
- **Backlog Health**: I% ready stories, J% blocked stories

### Clarification Points
{List any questions that need user input}

### Recommendations
1. {Priority recommendations based on analysis}
2. {Process improvements identified}
3. {Risk mitigations needed}

### Next Steps
- {Immediate actions needed}
- {Next review date}
- {Follow-up items}
```

## 🚨 CRITICAL VERIFICATION PROTOCOLS

**NEVER ASSUME - ALWAYS VERIFY:**

Before ANY grooming action, the agent MUST:

1. **📚 Documentation Check**: Search all project documentation first
2. **🔍 Template Verification**: Confirm all templates exist at specified paths
3. **📋 Checklist Validation**: Verify all required checklists are available
4. **🗂️ Registry Compliance**: Check document registry for file locations
5. **❓ Question When Unclear**: Stop and ask specific clarification questions
6. **🌐 Web Research**: Research authoritative sources when documentation is unclear
7. **🔄 Path Verification**: Confirm all file paths exist and are writable

**Example Verification Steps:**
```markdown
Before proceeding with grooming, verifying critical requirements:

✅ Epic template exists: {{AP_ROOT}}/agents/templates/epic-tmpl.md.template
✅ Story template exists: {{AP_ROOT}}/agents/templates/story-template.md.template  
✅ Feature spec template exists: {{AP_ROOT}}/agents/templates/feature-specification-template.md.template
✅ All PO checklists exist: {{AP_ROOT}}/agents/checklists/po-*.md.template
✅ Story checklists exist: {{AP_ROOT}}/agents/checklists/story-*.md.template
✅ Document registry exists: {{AP_ROOT}}/config/document-registry.json
✅ Target directories exist and are writable

⚠️ If ANY verification fails, STOP and ask user for guidance.
```

## 🎯 SUCCESS CRITERIA

A successful grooming session:

✅ **Reviews before creating** - Always checks existing work first  
✅ **Template compliance** - All epics/stories follow mandatory templates
✅ **File structure compliance** - All files created in document registry locations
✅ **Naming convention compliance** - All files follow EPIC-{id}-{title}.md / STORY-{id}-{title}.md format
✅ **Checklist validation** - All stories meet ALL mandatory PO checklists
✅ **Feature specifications** - All stories have feature specifications per template
✅ **Never assumes** - Always verifies or asks questions when unclear
✅ **Creates only what's needed** - No duplicate epics or stories  
✅ **Maintains quality** - Uses established checklists and standards  
✅ **Asks clarifying questions** - Pauses when direction is unclear  
✅ **Updates backlog properly** - Maintains center of truth  
✅ **Links everything** - Proper epic-story-backlog connections  
✅ **Documents decisions** - Clear record of what changed and why  

## 🚫 WHAT THIS COMMAND DOES NOT DO

❌ Generate business case analyses  
❌ Create comprehensive strategic reports  
❌ Run 18 parallel agents for simple decisions  
❌ Generate compliance documentation  
❌ Create duplicate epics or stories  
❌ Make assumptions about unclear requirements
❌ Create files without template compliance
❌ Skip mandatory checklist validation
❌ Place files in wrong locations (violates document registry)
❌ Use incorrect naming conventions
❌ Create stories without feature specifications  
❌ Proceed without verifying template existence
❌ Ignore architectural and implementation guidelines
❌ Skip quality validation steps  

## 🎭 VOICE NOTIFICATIONS

Throughout grooming process:
```bash
# At start
bash {{SPEAK_PO}} "Beginning intelligent backlog grooming - reviewing current state first"

# During analysis  
bash {{SPEAK_PO}} "Found potential direction changes - pausing for clarification"

# At completion
bash {{SPEAK_PO}} "Smart grooming complete - backlog updated with [X] changes, [Y] new items"
```

This command delivers **practical product ownership** - intelligent analysis, smart decisions, quality maintenance, and clear communication about what's actually needed.