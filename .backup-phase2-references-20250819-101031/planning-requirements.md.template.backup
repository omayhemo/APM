---
name: planning-requirements
description: Sequential requirements analysis with guided methodology with parallel execution option
metadata:
  version: 2.0.0
  agent: Analyst
  parallel_support: true
  modes: [sequential, parallel]
---

## ðŸŽ­ PERSONA CONTEXT ACTIVATION

**This command requires the Analyst persona.**

```markdown
*Loading Analyst context for requirements...*

Quick Context Load (1-2 seconds):
- Loading Analyst configuration and expertise
- Loading relevant templates and frameworks
- PARALLEL_MODE: Preparing parallel execution framework
- SEQUENTIAL_MODE: Standard context loading
- Workspace validation: Ensuring execution from {{PROJECT_ROOT}}

*Context ready. Choose execution mode...*
```

## Command Overview

This command supports both sequential and parallel execution:

**Sequential Mode (Default):**
- Focused, guided methodology with deep analysis
- Interactive stakeholder engagement
- Systematic validation and documentation
- Quality-focused approach

**Parallel Mode (--parallel flag):**
- Multiple native sub-agents working simultaneously  
- 70% performance improvement
- Comprehensive parallel coverage
- Speed-optimized execution

## Usage

```
/planning-requirements [--parallel]
```

**Parameters:**
- `--parallel`: Execute with parallel sub-agents for faster completion
- Default: Sequential execution with guided methodology

## SEQUENTIAL_MODE: Sequential Process

```
/planning-requirements
```

## Prerequisites

Before running this command, ensure:
- [ ] Project context and objectives are understood
- [ ] Key stakeholders are identified and accessible
- [ ] Business goals and constraints are known
- [ ] Existing requirements documentation reviewed
- [ ] Analysis scope and boundaries defined

## ðŸš€ INITIALIZATION PROTOCOL (MANDATORY)

**CRITICAL**: Upon activation, you MUST immediately execute initialization:

```
I'm launching sequential requirements analysis for comprehensive requirement gathering and documentation.

*Loading requirements frameworks and analysis methodologies...*
[Execute initialization tasks in sequence]
- Load requirements analysis templates and frameworks
- Review project context and stakeholder information
- Prepare requirements gathering techniques
- Set up validation and documentation processes
```

## Sequential Requirements Analysis Process

### Phase 1: Context & Stakeholder Analysis (10-15 minutes)
**Objective**: Understand the problem space and stakeholder needs
- **Project Context Review**
  - Business objectives and goals
  - Project scope and boundaries
  - Constraints and assumptions
  - Success criteria definition

- **Stakeholder Analysis**
  - Identify all stakeholder types
  - Understand stakeholder priorities
  - Map stakeholder influences and interests
  - Plan engagement strategies

### Phase 2: Requirements Discovery (20-30 minutes)
**Objective**: Systematically gather all types of requirements
- **Functional Requirements**
  - Core system capabilities
  - User interactions and workflows
  - Business process requirements
  - Data processing needs

- **Non-Functional Requirements**
  - Performance and scalability
  - Security and compliance
  - Usability and accessibility
  - Reliability and availability

- **Business Requirements**
  - Business rules and policies
  - Integration requirements
  - Reporting and analytics needs
  - Regulatory compliance

### Phase 3: Analysis & Validation (15-20 minutes)
**Objective**: Analyze, prioritize, and validate requirements
- **Requirements Analysis**
  - Feasibility assessment
  - Impact analysis
  - Dependency mapping
  - Risk identification

- **Validation & Prioritization**
  - Stakeholder validation
  - Business value assessment
  - MoSCoW prioritization
  - Conflict resolution

### Phase 4: Documentation & Traceability (10-15 minutes)
**Objective**: Document requirements with full traceability
- **Documentation Creation**
  - Clear requirement statements
  - Acceptance criteria definition
  - Traceability matrix
  - Dependencies documentation

- **Quality Assurance**
  - Completeness review
  - Consistency checking
  - Clarity verification
  - Stakeholder sign-off preparation

## Requirements Gathering Techniques

### Discovery Methods
- **Stakeholder Interviews**: One-on-one requirement gathering
- **Workshops**: Collaborative requirement sessions
- **Document Analysis**: Review of existing documentation
- **Observation**: Process and user behavior analysis
- **Prototyping**: Requirements validation through mockups

### Analysis Frameworks
- **MoSCoW Prioritization**: Must/Should/Could/Won't classification
- **Kano Model**: User satisfaction vs feature presence analysis
- **Impact/Effort Matrix**: Resource allocation decision support
- **FURPS+**: Functionality, Usability, Reliability, Performance, Supportability
- **SMART Criteria**: Specific, Measurable, Achievable, Relevant, Time-bound

### Validation Techniques
- **Requirements Review**: Systematic examination with stakeholders
- **Walkthrough**: Step-by-step requirement verification
- **Prototyping**: Early validation through working models
- **Scenario Testing**: Real-world usage validation
- **Traceability Analysis**: Requirement coverage verification

## Interactive Guidance Style

This command emphasizes **collaborative analysis**:
- **Socratic questioning** to uncover hidden requirements
- **Systematic methodology** ensuring comprehensive coverage
- **Stakeholder engagement** throughout the process
- **Iterative refinement** based on feedback
- **Quality focus** on clear, testable requirements

## Expected Outcomes

After requirements analysis:
- **Comprehensive requirements document** with all requirement types
- **Prioritized requirement list** with business value assessment
- **Traceability matrix** linking requirements to business objectives
- **Validation summary** with stakeholder confirmation
- **Implementation readiness** with clear acceptance criteria

## Output Format

```markdown
# Requirements Analysis Results

## Project Context
- **Project Name**: [Name]
- **Analysis Date**: [Date]
- **Analyst**: [Name]
- **Stakeholders**: [List]

## Executive Summary
### Business Objectives
- [Primary business goal]
- [Secondary business goal]
- [Success criteria]

### Scope
- **In Scope**: [What's included]
- **Out of Scope**: [What's excluded]
- **Assumptions**: [Key assumptions made]

## Stakeholder Analysis
| Stakeholder | Role | Influence | Interest | Priority Requirements |
|-------------|------|-----------|----------|---------------------|
| [Name] | [Role] | [High/Med/Low] | [Primary interest] | [Key needs] |

## Functional Requirements
### Core Functionality
#### REQ-F-001: [Requirement Title]
- **Description**: [Clear requirement statement]
- **Priority**: [Must/Should/Could/Won't]
- **Source**: [Stakeholder/Document]
- **Acceptance Criteria**:
  - Given [context], when [action], then [outcome]
  - [Additional criteria]

### User Interface Requirements
#### REQ-F-010: [UI Requirement]
- **Description**: [UI requirement details]
- **Priority**: [MoSCoW]
- **Mockups**: [Reference to designs]

## Non-Functional Requirements
### Performance Requirements
#### REQ-NF-001: [Performance Requirement]
- **Description**: [Performance standard]
- **Measurement**: [How measured]
- **Target**: [Specific metric]

### Security Requirements
#### REQ-NF-010: [Security Requirement]
- **Description**: [Security need]
- **Compliance**: [Standards/regulations]

## Business Requirements
### Business Rules
#### REQ-BR-001: [Business Rule]
- **Description**: [Rule definition]
- **Impact**: [Business impact]
- **Implementation**: [How enforced]

### Integration Requirements
#### REQ-INT-001: [Integration Need]
- **System**: [External system]
- **Interface**: [Integration method]
- **Data Flow**: [Information exchange]

## Requirements Analysis
### Priority Matrix
| Priority | Count | Business Value | Implementation Effort |
|----------|-------|----------------|---------------------|
| Must Have | [#] | [High/Med/Low] | [High/Med/Low] |
| Should Have | [#] | [High/Med/Low] | [High/Med/Low] |
| Could Have | [#] | [High/Med/Low] | [High/Med/Low] |

### Dependencies
- **REQ-XXX depends on REQ-YYY**: [Dependency description]
- **External Dependencies**: [Third-party requirements]

### Risks
- **Risk**: [Description] â†’ **Mitigation**: [Strategy]
- **Assumption Risk**: [If assumption false] â†’ **Mitigation**: [Plan]

## Validation Summary
- **Stakeholder Review**: [Completed/Pending]
- **Business Validation**: [Approved/Needs revision]
- **Technical Feasibility**: [Confirmed/Needs analysis]
- **Conflicts Identified**: [Number and status]

## Traceability Matrix
| Requirement ID | Business Objective | Stakeholder | Test Case | Status |
|----------------|-------------------|-------------|-----------|--------|
| REQ-F-001 | [Objective] | [Source] | TC-001 | [Draft/Final] |

## Next Steps
1. [Immediate action needed]
2. [Stakeholder approvals required]
3. [Technical feasibility analysis]
4. [Requirements baseline establishment]

## Appendices
### Glossary
- **Term 1**: [Definition]
- **Term 2**: [Definition]

### References
- [Document 1]: [Purpose]
- [Interview with Stakeholder]: [Date and key points]
```

## Integration Points

- **Epic Development**: Use `/planning-epic` to create epics from requirements
- **Stakeholder Engagement**: Use `/planning-stakeholder-review` for validation
- **Technical Analysis**: Use `/planning-architecture` for solution design
- **Project Planning**: Use `/prd` for comprehensive product requirements

## Voice Notifications

```bash
bash {{AP_ROOT}}/voice/speakAnalyst.sh "Sequential requirements analysis beginning. Launching systematic requirement gathering and analysis process..."
```

## Success Metrics

- **Completeness**: All requirement types systematically covered
- **Quality**: Clear, testable, and traceable requirements
- **Stakeholder Satisfaction**: Requirements accurately reflect needs
- **Implementation Readiness**: Requirements ready for development planning
- **Validation Success**: All requirements validated by stakeholders

## When to Use Sequential vs Parallel

**Use `/planning-requirements` when:**
- Deep stakeholder engagement needed
- Complex requirement interdependencies
- Thorough analysis and validation critical
- Interactive requirement refinement desired
- Quality over speed prioritized

**Use `/parallel-requirements` when:**
- Multiple requirement domains simultaneously
- Time constraints exist
- Comprehensive coverage needed quickly
- Well-defined analysis framework
- Speed and efficiency prioritized

---

This command provides thorough, methodical requirements analysis with emphasis on stakeholder collaboration, systematic coverage, and quality documentation.

## PARALLEL_MODE: Parallel Process
## ðŸš€ INITIALIZATION PROTOCOL (MANDATORY)

**CRITICAL**: Upon activation, you MUST immediately execute parallel initialization:

```
I'm launching parallel requirements analysis with 5 native sub-agents for comprehensive coverage.

*Executing parallel initialization tasks:*
[Use native sub-agents - ALL in single function_calls block]
- Task 1: Load Analyst persona configuration from {{AP_ROOT}}/personas/analyst.md
- Task 2: Load project documentation from {{PROJECT_ROOT}}/project_docs/
- Task 3: Load existing requirements if available from {{PROJECT_ROOT}}/project_docs/planning-requirements/
- Task 4: Load stakeholder information and user personas
- Task 5: Load compliance and regulatory requirements
```

### Initialization Task Prompts:
1. "Read analyst principles, requirements gathering methodologies, and analysis frameworks"
2. "Scan all project documentation for existing requirements and context"
3. "Check for any documented requirements, user stories, or acceptance criteria"
4. "Identify stakeholders, user personas, and their specific needs"
5. "Review compliance requirements, industry standards, and regulatory constraints"

### Post-Initialization:
After ALL tasks complete:
1. Voice announcement: bash {{AP_ROOT}}/voice/speakAnalyst.sh "Parallel requirements analysis initialized with 5 analysis streams"
2. Launch parallel analysis sub-agents

## ðŸš€ PARALLEL ANALYSIS EXECUTION

### Comprehensive Requirements Streams (5 Parallel Sub-Agents)
```
*Launching requirements analysis sub-agents:*
[Use native sub-agents - ALL in single function_calls block]
- Sub-Agent 1: Functional Requirements Analysis
  Prompt: "Analyze and document all functional requirements including features, capabilities, user interactions, workflows, and business logic. Create detailed functional specifications."

- Sub-Agent 2: Non-Functional Requirements Analysis  
  Prompt: "Identify and document all non-functional requirements including performance, scalability, security, reliability, usability, accessibility, and compatibility requirements."

- Sub-Agent 3: Constraints & Dependencies Analysis
  Prompt: "Map all technical constraints, system dependencies, integration requirements, third-party dependencies, and architectural constraints that impact the solution."

- Sub-Agent 4: User & Stakeholder Requirements
  Prompt: "Analyze user needs, stakeholder expectations, user journey requirements, acceptance criteria, and success metrics from all stakeholder perspectives."

- Sub-Agent 5: Compliance & Risk Requirements
  Prompt: "Identify regulatory requirements, compliance needs, security requirements, data privacy constraints, and risk mitigation requirements."
```

## ðŸ“Š REQUIREMENTS OUTPUT FORMAT

### Comprehensive Requirements Document
```markdown
# Requirements Analysis Report
Generated: [Timestamp]
Analysis Method: 5-Stream Parallel Analysis

## 1. FUNCTIONAL REQUIREMENTS
### Core Features
- FR001: [Requirement]
  - Description: [Detail]
  - Priority: [High/Medium/Low]
  - Acceptance Criteria: [Criteria]

### User Interactions
- FR002: [Requirement]
  - User Story: As a [user], I want [feature] so that [benefit]
  - Dependencies: [List]

## 2. NON-FUNCTIONAL REQUIREMENTS
### Performance
- NFR001: [Requirement]
  - Metric: [Measurable metric]
  - Target: [Specific target]

### Security
- NFR002: [Requirement]
  - Standard: [Compliance standard]
  - Implementation: [Approach]

## 3. CONSTRAINTS & DEPENDENCIES
### Technical Constraints
- TC001: [Constraint]
  - Impact: [Description]
  - Mitigation: [Strategy]

### System Dependencies
- SD001: [Dependency]
  - Type: [Internal/External]
  - Risk Level: [High/Medium/Low]

## 4. STAKEHOLDER REQUIREMENTS
### Primary Users
- SR001: [Requirement]
  - Stakeholder: [Name/Role]
  - Priority: [MoSCoW]

## 5. COMPLIANCE & RISK
### Regulatory Requirements
- CR001: [Requirement]
  - Regulation: [Name]
  - Deadline: [Date]

### Risk Mitigation
- RM001: [Risk]
  - Likelihood: [High/Medium/Low]
  - Impact: [High/Medium/Low]
  - Mitigation: [Strategy]

## REQUIREMENTS SUMMARY
- **Total Requirements**: [Count]
- **Critical Path Items**: [List]
- **High-Risk Areas**: [List]
- **Dependencies**: [Count]
- **Compliance Items**: [Count]
```

## ðŸ”„ ANALYSIS WORKFLOW

### Step 1: Parallel Discovery
- Launch all 5 sub-agents simultaneously
- Each analyzes their specific domain
- Gather comprehensive insights

### Step 2: Cross-Reference & Validation
- Identify overlaps and conflicts
- Validate requirements consistency
- Ensure completeness

### Step 3: Prioritization
- Apply MoSCoW methodology
- Consider business value
- Assess technical feasibility

### Step 4: Documentation
- Create structured requirements document
- Generate traceability matrix
- Update project documentation

## ðŸŽ¯ PERFORMANCE METRICS

- **Analysis Time**: ~3 minutes (vs 10 minutes sequential)
- **Coverage**: 100% of requirement categories
- **Parallel Streams**: 5 simultaneous analyses
- **Output Quality**: Enterprise-grade documentation

## ðŸ“‹ DELIVERABLES

After execution, this command provides:
- Comprehensive requirements document
- Requirements traceability matrix
- Risk assessment matrix
- Dependency mapping
- Compliance checklist
- Prioritized requirements backlog
- Acceptance criteria definitions
- Stakeholder sign-off template

## ðŸ”— INTEGRATION POINTS

### Handoff to PM:
```
/handoff pm
"Requirements analysis complete. [X] functional and [Y] non-functional requirements identified. Ready for PRD creation."
```

### Handoff to Architect:
```
/handoff architect
"Requirements documented with [Z] technical constraints. Architecture design can proceed."
```

## Available After Activation:
- Complete requirements specification
- Prioritized requirements list
- Risk and compliance analysis
- Stakeholder requirement mapping
- Dependency analysis
- Acceptance criteria library
- Requirements validation checklist

This command accelerates requirements analysis by 70% through native parallel execution, ensuring comprehensive coverage across all requirement dimensions.
