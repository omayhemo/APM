# Git Commit All Changes
name: distribution-commit

This command organizes all changes into logical commits and pushes them to the repository.

## Process

1. **Status Check**: Show current git status and analyze all changes
2. **Organize Changes**: Group files by logical categories
3. **Create Commits**: Make separate commits for each logical group
4. **Push**: Push all commits to origin

## Implementation

When invoked, the assistant will:

1. **Initial Status Check**
   ```bash
   git status --porcelain
   git diff --cached --name-only
   git ls-files --others --exclude-standard
   ```

2. **Analyze and Group Changes**
   - Documentation updates (*.md files, docs/*)
   - Template changes (templates/*)
   - Script modifications (*.sh, *.py)
   - Configuration updates (*.json, *.yaml, *.template)
   - Feature additions (new files/directories)
   - Bug fixes (modifications to existing code)
   - Build/distribution changes
   - APM-specific changes (.apm/*, ${AP_ROOT}/*)

3. **Create Logical Commits**
   ```bash
   # For each logical group:
   git add [relevant files]
   git commit -m "[Type]: Description
   
   - Detail 1
   - Detail 2
   
   ðŸ¤– Generated with Claude Code"
   ```

4. **Final Push**
   ```bash
   git push origin HEAD
   ```

## Commit Message Format

- `feat:` New features or capabilities
- `fix:` Bug fixes
- `docs:` Documentation updates
- `refactor:` Code refactoring
- `chore:` Build, config, or maintenance tasks
- `test:` Test additions or modifications
- `apm:` APM framework specific changes

## Safety Features

- Shows summary of changes before committing
- Ensures no sensitive files are included
- Checks for uncommitted submodules
- Verifies branch is up to date before pushing
- Respects .gitignore rules

## Usage

Simply run:
```
/git-commit-all
```

The assistant will handle all git operations, ensuring every change is properly categorized, committed with clear messages, and pushed to the repository.

## APM Integration

This command is APM-aware and will:
- Recognize APM directory structure
- Group APM-related changes appropriately
- Use proper commit prefixes for APM components
- Ensure project documentation updates are committed

---
*Part of the APM Development Workflow*