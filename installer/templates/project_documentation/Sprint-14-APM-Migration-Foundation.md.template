# Sprint 14: APM Migration Foundation Phase

**Sprint Goal**: Create sub-agent infrastructure templates and migrate core agents to template format  
**Duration**: {{SPRINT_DURATION}}  
**Sprint Master**: {{SPRINT_MASTER}}  
**Capacity**: 21 Story Points  

## Sprint Overview

This sprint establishes the foundation for APM to Claude Code Sub-Agents Migration by creating comprehensive installer templates. **CRITICAL**: All work is template-based - no direct APM modifications allowed.

### Key Objectives
1. Create sub-agent infrastructure templates for installer
2. Develop core agent templates (Developer, Architect, QA, Orchestrator)  
3. Establish APM protection protocols in templates
4. Validate template-based approach without APM violations

## Sprint Stories

### Story 16.1: Create Sub-Agent Infrastructure Templates (3 Points)
**Status**: {{STORY_16_1_STATUS}}  
**Assignee**: {{STORY_16_1_ASSIGNEE}}

**Acceptance Criteria**:
- [x] Create `templates/templates/claude/agents/README.md.template`
- [x] Create `templates/templates/claude/agents/agent-template.md.template`  
- [x] Create `templates/templates/claude/agents/config/base-config.yaml.template`
- [x] Create `templates/templates/claude/agents/migration/tracking.md.template`
- [x] Create `templates/templates/claude/agents/migration/rollback.md.template`
- [x] **CRITICAL**: Zero modifications to `.apm/` directory

**Implementation Notes**:
- **APM Protection Violation Detected and Corrected**: Initial implementation incorrectly created `.claude/agents/` directory
- **Resolution**: Removed all APM infrastructure modifications, created proper installer templates
- All templates created in `templates/templates/claude/agents/` for installer processing
- Template variables added for dynamic configuration during installation

### Story 16.2: Create Developer Agent Template (5 Points)
**Status**: {{STORY_16_2_STATUS}}  
**Assignee**: {{STORY_16_2_ASSIGNEE}}

**Acceptance Criteria**:
- [ ] Create `templates/templates/claude/agents/personas/developer.md.template`
- [ ] Preserve all Developer agent capabilities in template format
- [ ] Include parallel execution features (`/parallel-review`)
- [ ] Maintain voice notification integration (speakDeveloper.sh)
- [ ] Ensure backward compatibility with `/dev` command
- [ ] **CRITICAL**: Only create templates, never modify APM

### Story 16.3: Create Architect Agent Template (5 Points)  
**Status**: {{STORY_16_3_STATUS}}  
**Assignee**: {{STORY_16_3_ASSIGNEE}}

**Acceptance Criteria**:
- [ ] Create `templates/templates/claude/agents/personas/architect.md.template`
- [ ] Preserve all Architect agent capabilities in template format
- [ ] Include parallel architecture features (`/parallel-architecture`)
- [ ] Maintain voice notification integration (speakArchitect.sh)
- [ ] Ensure backward compatibility with `/architect` command
- [ ] **CRITICAL**: Only create templates, never modify APM

### Story 16.4: Create QA Agent Template (5 Points)
**Status**: {{STORY_16_4_STATUS}}  
**Assignee**: {{STORY_16_4_ASSIGNEE}}

**Acceptance Criteria**:
- [ ] Create `templates/templates/claude/agents/personas/qa.md.template`
- [ ] Preserve all QA Framework capabilities in template format
- [ ] Include AI/ML features (92% prediction, 63% optimization, 94% anomaly detection)
- [ ] Maintain voice notification integration (speakQa.sh)
- [ ] Ensure backward compatibility with `/qa` command
- [ ] **CRITICAL**: Only create templates, never modify APM

### Story 16.5: Create Orchestrator Template (3 Points)
**Status**: {{STORY_16_5_STATUS}}  
**Assignee**: {{STORY_16_5_ASSIGNEE}}

**Acceptance Criteria**:
- [ ] Create `templates/templates/claude/agents/personas/orchestrator.md.template`
- [ ] Preserve all Orchestrator coordination capabilities in template format
- [ ] Include parallel initialization features
- [ ] Maintain voice notification integration (speakOrchestrator.sh)
- [ ] Ensure backward compatibility with `/ap` command
- [ ] **CRITICAL**: Only create templates, never modify APM

## Sprint Execution Strategy

### Parallel Development Approach
This sprint uses parallel development coordination:

1. **Foundation First**: Complete Story 16.1 (Infrastructure Templates)
2. **Parallel Agent Development**: Execute Stories 16.2-16.5 simultaneously
3. **Integration Validation**: Ensure all templates work together
4. **APM Protection Verification**: Confirm no APM modifications

### Critical Success Factors

#### APM Protection Protocol (MANDATORY)
- **NEVER** modify any file in `.apm/` directory
- **ONLY** create files in `templates/templates/claude/agents/`
- **ALWAYS** use `.template` suffix for installer processing
- **VERIFY** template structure before creation
- **IMMEDIATE CORRECTION** if APM violations detected

#### Template Quality Standards
- All agent capabilities preserved in template format
- Voice notification integration maintained
- Backward compatibility ensured through templates
- Session management preserved in templates
- Parallel execution features templated correctly

## Risk Management

### Critical Risks
| Risk | Impact | Mitigation |
|------|--------|------------|
| APM Framework Violation | Critical | Templates-only approach, immediate correction protocol |
| Template Functionality Loss | High | Comprehensive testing of template outputs |
| Voice Integration Failure | Medium | Preserve existing script references in templates |
| Backward Compatibility Break | High | Dual-mode operation through templates |

### Risk Mitigation Actions
- **APM Protection Monitoring**: Continuous verification of no APM modifications
- **Template Validation**: Test template output before sprint completion
- **Rollback Readiness**: Template-based rollback procedures available
- **User Communication**: Clear explanation of template-based approach

## Definition of Done

For Sprint 14 to be considered complete:
- [ ] All 5 stories completed successfully
- [ ] All templates created in `templates/templates/claude/agents/`
- [ ] Zero modifications made to APM framework
- [ ] Template structure validated for installer compatibility
- [ ] Voice notification templates tested
- [ ] Backward compatibility templates verified
- [ ] APM protection protocol fully implemented
- [ ] Sprint retrospective completed with lessons learned

## Sprint Metrics

### Velocity Tracking
- **Planned Capacity**: 21 story points
- **Actual Delivery**: {{ACTUAL_DELIVERY}} story points
- **Velocity**: {{SPRINT_VELOCITY}} points/week

### Quality Metrics
- **APM Violations**: {{APM_VIOLATIONS}} (Target: 0)
- **Template Coverage**: {{TEMPLATE_COVERAGE}}% (Target: 100%)
- **Regression Issues**: {{REGRESSION_ISSUES}} (Target: 0)
- **Voice Integration Success**: {{VOICE_SUCCESS}}% (Target: 100%)

## Sprint Review

### Completed Work
{{COMPLETED_WORK_SUMMARY}}

### Lessons Learned
{{LESSONS_LEARNED}}

### Next Sprint Preparation
- **Sprint 15 Focus**: Enhancement Phase - remaining agent templates
- **Dependencies Resolved**: Foundation templates ready for extension
- **Risks for Next Sprint**: {{NEXT_SPRINT_RISKS}}

## Critical Incident Resolution

### APM Protection Violation Incident
**Date**: 2025-07-25  
**Issue**: Initial implementation created `.claude/agents/` directory, violating APM protection  
**Resolution**: 
- Immediately removed all APM infrastructure modifications
- Created proper installer templates in `templates/templates/claude/agents/`
- Updated all documentation to reflect template-based approach
- Implemented enhanced APM protection monitoring

**Lessons Learned**:
- APM protection must be enforced at template creation time
- All team members must understand template-first approach
- Continuous monitoring needed to prevent future violations
- Template validation critical before any deployment

---

**Sprint Success Criteria**: Foundation phase complete with comprehensive installer templates and zero APM framework modifications.